// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/ums/api/ums.proto

/*
Package go_micro_srv_ums is a generated protocol buffer package.

It is generated from these files:
	srv/ums/api/ums.proto

It has these top-level messages:
	G2LRequest
	G2LResponse
	A2LRequest
	A2LResponse
	PushRequest
	PushResponse
*/
package go_micro_srv_ums

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ums service

type UmsService interface {
	Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error)
	G2L(ctx context.Context, in *G2LRequest, opts ...client.CallOption) (*G2LResponse, error)
	A2L(ctx context.Context, in *A2LRequest, opts ...client.CallOption) (*A2LResponse, error)
}

type umsService struct {
	c    client.Client
	name string
}

func NewUmsService(name string, c client.Client) UmsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.ums"
	}
	return &umsService{
		c:    c,
		name: name,
	}
}

func (c *umsService) Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error) {
	req := c.c.NewRequest(c.name, "Ums.Push", in)
	out := new(PushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umsService) G2L(ctx context.Context, in *G2LRequest, opts ...client.CallOption) (*G2LResponse, error) {
	req := c.c.NewRequest(c.name, "Ums.G2L", in)
	out := new(G2LResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umsService) A2L(ctx context.Context, in *A2LRequest, opts ...client.CallOption) (*A2LResponse, error) {
	req := c.c.NewRequest(c.name, "Ums.A2L", in)
	out := new(A2LResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ums service

type UmsHandler interface {
	Push(context.Context, *PushRequest, *PushResponse) error
	G2L(context.Context, *G2LRequest, *G2LResponse) error
	A2L(context.Context, *A2LRequest, *A2LResponse) error
}

func RegisterUmsHandler(s server.Server, hdlr UmsHandler, opts ...server.HandlerOption) error {
	type ums interface {
		Push(ctx context.Context, in *PushRequest, out *PushResponse) error
		G2L(ctx context.Context, in *G2LRequest, out *G2LResponse) error
		A2L(ctx context.Context, in *A2LRequest, out *A2LResponse) error
	}
	type Ums struct {
		ums
	}
	h := &umsHandler{hdlr}
	return s.Handle(s.NewHandler(&Ums{h}, opts...))
}

type umsHandler struct {
	UmsHandler
}

func (h *umsHandler) Push(ctx context.Context, in *PushRequest, out *PushResponse) error {
	return h.UmsHandler.Push(ctx, in, out)
}

func (h *umsHandler) G2L(ctx context.Context, in *G2LRequest, out *G2LResponse) error {
	return h.UmsHandler.G2L(ctx, in, out)
}

func (h *umsHandler) A2L(ctx context.Context, in *A2LRequest, out *A2LResponse) error {
	return h.UmsHandler.A2L(ctx, in, out)
}
