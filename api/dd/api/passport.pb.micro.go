// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/dd/api/passport.proto

package go_micro_api_passport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/v2/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Passport service

type PassportService interface {
	Sms(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	SmsLogin(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	SetPwd(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Login(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	OAuthLogin(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type passportService struct {
	c    client.Client
	name string
}

func NewPassportService(name string, c client.Client) PassportService {
	return &passportService{
		c:    c,
		name: name,
	}
}

func (c *passportService) Sms(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Passport.Sms", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) SmsLogin(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Passport.SmsLogin", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) SetPwd(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Passport.SetPwd", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) Login(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Passport.Login", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) OAuthLogin(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Passport.OAuthLogin", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Passport service

type PassportHandler interface {
	Sms(context.Context, *proto1.Request, *proto1.Response) error
	SmsLogin(context.Context, *proto1.Request, *proto1.Response) error
	SetPwd(context.Context, *proto1.Request, *proto1.Response) error
	Login(context.Context, *proto1.Request, *proto1.Response) error
	OAuthLogin(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterPassportHandler(s server.Server, hdlr PassportHandler, opts ...server.HandlerOption) error {
	type passport interface {
		Sms(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		SmsLogin(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		SetPwd(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Login(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		OAuthLogin(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Passport struct {
		passport
	}
	h := &passportHandler{hdlr}
	return s.Handle(s.NewHandler(&Passport{h}, opts...))
}

type passportHandler struct {
	PassportHandler
}

func (h *passportHandler) Sms(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PassportHandler.Sms(ctx, in, out)
}

func (h *passportHandler) SmsLogin(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PassportHandler.SmsLogin(ctx, in, out)
}

func (h *passportHandler) SetPwd(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PassportHandler.SetPwd(ctx, in, out)
}

func (h *passportHandler) Login(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PassportHandler.Login(ctx, in, out)
}

func (h *passportHandler) OAuthLogin(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.PassportHandler.OAuthLogin(ctx, in, out)
}
